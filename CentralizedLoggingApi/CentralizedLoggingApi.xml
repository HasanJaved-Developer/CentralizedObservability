<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CentralizedLoggingApi</name>
    </assembly>
    <members>
        <member name="M:CentralizedLoggingApi.Controllers.ApplicationsController.GetById(System.Int32)">
            <summary>
            Fetches an application by its unique Id.
            </summary>
            <remarks>
            This endpoint retrieves application details from the database.  
            
            **Logging:**  
            - On every call, Serilog writes an entry to the log file (e.g., `dev-app-.clef`).  
            - If an error occurs (e.g., record not found or DB exception), the error is also recorded in the same log file.  
            
            **Usage:**  
            `GET /api/applications/{id}`  
            
            Note:  
            The logging setup ensures that each request is auditable and errors can be traced via structured log files.
            </remarks>
            <param name="id">Unique application Id.</param>
            <returns>Returns the application details if found, otherwise NotFound (404).</returns>
        </member>
        <member name="M:CentralizedLoggingApi.Controllers.ApplicationsController.Boom">
            <summary>
            Test endpoint that always throws an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <remarks>
            <para>
            This endpoint exists only for verifying the application's global exception
            handling middleware and Serilog logging.
            </para>
            <para>
            When called, it will throw an unhandled exception. The request should be
            intercepted by <c>ExceptionHandlingMiddleware</c>, which will log the error
            and return a consistent JSON error response.
            </para>
            </remarks>
            <response code="500">Always returned, because the endpoint throws an exception.</response>
        </member>
        <member name="M:CentralizedLoggingApi.Infrastructure.MigrationWithLockExtensions.MigrateAndSeedWithSqlLockAsync``1(Microsoft.Extensions.Hosting.IHost,System.String,System.String,System.Func{System.IServiceProvider,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Acquires a SQL app-lock, then runs EF Migrate() and your seed delegate.
            Use the SAME lock name across ALL services hitting the same SQL Server.
            </summary>
        </member>
        <member name="T:CentralizedLoggingApi.Migrations.InitialCreate">
            <inheritdoc />
        </member>
        <member name="M:CentralizedLoggingApi.Migrations.InitialCreate.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:CentralizedLoggingApi.Migrations.InitialCreate.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:CentralizedLoggingApi.Migrations.InitialCreate.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
    </members>
</doc>
